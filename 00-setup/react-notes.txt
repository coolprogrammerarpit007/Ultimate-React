State:- STATE is the most fundamental concept in react,whenever we want to change something in the UI, we change or update the state.
sandbox Link:- https://codesandbox.io/p/sandbox/happy-butterfly-lmm576

Why do frontend framework like react is required?

1. Front-end web applications are all about Handling data + displaying data in the user Interface.
2. UI needs to stay in sync with data.
3. React like front-end frameworks helps keeping a user Interface in sync with data

// What is React ?
Javascript library for building user Interfaces.
// Extermely Popular, Declarative,Component-based state-driven JS library fot building UI.
// Components are building block of React.
// We build complex UI by building components and combining these components to build UI.
// We describe how components look like and how they work using a declarative syntax called JSX.
// Declarative means react what a component should look like,based on current data/state.
// React is abstraction away from DOM.

// State-driven -> whenever data/state changes, react reacts to state-change by re-rendering the UI.

// js is a library.

React applications are entirely made out of components.
Components are the building blocks of user interfaces in React.
Components are piece of UI that has it's own data,logic and appereance(how it works and looks)
we build complex UIs by building multiple components and combining them.
Components can be re-used , nested inside each other and pass data between them.

Rules for writing components.
1. When writing component, it should be capital
2. Component must need to be return Markup., it can also return null

JSX
This is a declarative syntax to describe what components look like and how they work.
Each component must return a block of JSX.
JSX is an extention of Javascript that allows us to embed Javascript CSS and Html components into React.
Each JSX element is converted to a React.createElement function call.

JSX is declarative

Imperative

Manual DOM element Selection amd DOM traversing.
Step by step DOM Mutations untill we reach the desired UI.
// Imperative means telling browser what and how to do.

Declarative
Describe what UI should look like using JSX., based on current data.
Raact is abstraction from DOM.
In react, UI is reflection of data called state in future. not need to tell browser how to mutate DOM react handles it very well.

Props
// How to pass data between components. and mainly from parent component to the child component.
1. we use props to pass data from the parent component to the child component.(down the component tree.)
2. Essential tool to configure and customize components.
3. with props, parent components control how child components look and work.
4. Anything can be passed as props, single values, arrays, objects, functions, even other components.


components are made of three parts:- logic,appereance and data.
data is made of two parts. 1. Props and 2. State.
Props is data coming from the outside, and can only be updated by the parent component.
State is internal data  that can be updated by the component itself.
Props are read-only, they are immuttable! this is one of react's strict rule.
If you need to mutate props, actually you need states.

Rules of JSX
1. jsx WORKS essentilly like HTML, but we can enter JS mode by using {} (for text or attributes.)
2. we can place Js expressions inside {}. 

// Handling Event The React Way:-
// 1. Use the event handler as a prop in the react component, always use callback function to bind the context of the event handler. 

State in React.
State is a data that a component can hold over time, necessary for information that it needs to remember throughout the application's lifecycle.
2. State is components' memory.
State Variable/piece of state:-  a single variable in a component(component state.)
3. updating state triggers react to re-render the component.

Summary:-
1. State allows developers to update the component's view by re-rendering it.
2. persist local variables b/w renderers.

In order to use states in the component, we do three steps.
1. create a new state variable.
2. use it in code,generally in the JSX.
3. updete the state using some event handler function.

hooks are allowed to use at the top level of the function or component. not inside callback or if conditions.

// Mechanics of state in react.
1. we don't do direct DOM manipulations in react. because react is declarative.
Question is:- how a component view is updated then.

In React, a view is updated by re-rendering the component.
Re-rendering means,react calling the function again.
State is preserved throughout re-renders. when a state is updated component automatically re-renders.

In summary, as a react developer whenever we want to update view, we update state, as the state updates, react automatically renders the component again means call the function again and show the latest view to the user.

// updating state based on the current value.
// for updating state based on the current state, pass a callback function in the setCounter function.
// when we are not updating state based on the current state, we can pass a value directly to the setCounter function.
Each component has and manages it's own state, no matter how many times we render the same component.
with state, we view UI as a reflection of data changing over time.
we describe that reflection of data using state, event handlers and JSX.

// Practical Guidlines about the state.
1. use state variable for any data that the component should keep track over time.this is data that will change at some point.
2. whenever you want something in the component to be dynamic, creata a piece of state related to that thing, and update that state when that "thing" should change. 
3. if you want to change a way component looks, or the data it displays, update it's state , that usually happens in an event handler function.
4. when building a component , imagine it's view as a reflection of state changing over time.
5. for a data that should not trigger component re-renders , don't use atate. use a regular variable instead.